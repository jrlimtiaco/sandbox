// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Minter extends ethereum.Event {
  get params(): Minter__Params {
    return new Minter__Params(this);
  }
}

export class Minter__Params {
  _event: Minter;

  constructor(event: Minter) {
    this._event = event;
  }

  get superOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class MetaTransactionProcessor extends ethereum.Event {
  get params(): MetaTransactionProcessor__Params {
    return new MetaTransactionProcessor__Params(this);
  }
}

export class MetaTransactionProcessor__Params {
  _event: MetaTransactionProcessor;

  constructor(event: MetaTransactionProcessor) {
    this._event = event;
  }

  get metaTransactionProcessor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SuperOperator extends ethereum.Event {
  get params(): SuperOperator__Params {
    return new SuperOperator__Params(this);
  }
}

export class SuperOperator__Params {
  _event: SuperOperator;

  constructor(event: SuperOperator) {
    this._event = event;
  }

  get superOperator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get oldAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Land extends ethereum.SmartContract {
  static bind(address: Address): Land {
    return new Land("Land", address);
  }

  supportsInterface(id: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(id)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(id: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(id: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  height(): BigInt {
    let result = super.call("height", "height():(uint256)", []);

    return result[0].toBigInt();
  }

  try_height(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("height", "height():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  x(id: BigInt): BigInt {
    let result = super.call("x", "x(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_x(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("x", "x(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  y(id: BigInt): BigInt {
    let result = super.call("y", "y(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_y(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("y", "y(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(id: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isSuperOperator(who: Address): boolean {
    let result = super.call(
      "isSuperOperator",
      "isSuperOperator(address):(bool)",
      [ethereum.Value.fromAddress(who)]
    );

    return result[0].toBoolean();
  }

  try_isSuperOperator(who: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSuperOperator",
      "isSuperOperator(address):(bool)",
      [ethereum.Value.fromAddress(who)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAdmin(): Address {
    let result = super.call("getAdmin", "getAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_getAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("getAdmin", "getAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _numNFTPerAddress(param0: Address): BigInt {
    let result = super.call(
      "_numNFTPerAddress",
      "_numNFTPerAddress(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try__numNFTPerAddress(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_numNFTPerAddress",
      "_numNFTPerAddress(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _owners(param0: BigInt): BigInt {
    let result = super.call("_owners", "_owners(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try__owners(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_owners", "_owners(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _operatorsForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "_operatorsForAll",
      "_operatorsForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try__operatorsForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_operatorsForAll",
      "_operatorsForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  width(): BigInt {
    let result = super.call("width", "width():(uint256)", []);

    return result[0].toBigInt();
  }

  try_width(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("width", "width():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMinter(who: Address): boolean {
    let result = super.call("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(who)
    ]);

    return result[0].toBoolean();
  }

  try_isMinter(who: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(who)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _operators(param0: BigInt): Address {
    let result = super.call("_operators", "_operators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try__operators(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("_operators", "_operators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(id: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_tokenURI(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isMetaTransactionProcessor(who: Address): boolean {
    let result = super.call(
      "isMetaTransactionProcessor",
      "isMetaTransactionProcessor(address):(bool)",
      [ethereum.Value.fromAddress(who)]
    );

    return result[0].toBoolean();
  }

  try_isMetaTransactionProcessor(who: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMetaTransactionProcessor",
      "isMetaTransactionProcessor(address):(bool)",
      [ethereum.Value.fromAddress(who)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class HeightCall extends ethereum.Call {
  get inputs(): HeightCall__Inputs {
    return new HeightCall__Inputs(this);
  }

  get outputs(): HeightCall__Outputs {
    return new HeightCall__Outputs(this);
  }
}

export class HeightCall__Inputs {
  _call: HeightCall;

  constructor(call: HeightCall) {
    this._call = call;
  }
}

export class HeightCall__Outputs {
  _call: HeightCall;

  constructor(call: HeightCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BatchTransferFromCall extends ethereum.Call {
  get inputs(): BatchTransferFromCall__Inputs {
    return new BatchTransferFromCall__Inputs(this);
  }

  get outputs(): BatchTransferFromCall__Outputs {
    return new BatchTransferFromCall__Outputs(this);
  }
}

export class BatchTransferFromCall__Inputs {
  _call: BatchTransferFromCall;

  constructor(call: BatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BatchTransferFromCall__Outputs {
  _call: BatchTransferFromCall;

  constructor(call: BatchTransferFromCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class ApproveForCall extends ethereum.Call {
  get inputs(): ApproveForCall__Inputs {
    return new ApproveForCall__Inputs(this);
  }

  get outputs(): ApproveForCall__Outputs {
    return new ApproveForCall__Outputs(this);
  }
}

export class ApproveForCall__Inputs {
  _call: ApproveForCall;

  constructor(call: ApproveForCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveForCall__Outputs {
  _call: ApproveForCall;

  constructor(call: ApproveForCall) {
    this._call = call;
  }
}

export class TransferQuadCall extends ethereum.Call {
  get inputs(): TransferQuadCall__Inputs {
    return new TransferQuadCall__Inputs(this);
  }

  get outputs(): TransferQuadCall__Outputs {
    return new TransferQuadCall__Outputs(this);
  }
}

export class TransferQuadCall__Inputs {
  _call: TransferQuadCall;

  constructor(call: TransferQuadCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get size(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get x(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TransferQuadCall__Outputs {
  _call: TransferQuadCall;

  constructor(call: TransferQuadCall) {
    this._call = call;
  }
}

export class XCall extends ethereum.Call {
  get inputs(): XCall__Inputs {
    return new XCall__Inputs(this);
  }

  get outputs(): XCall__Outputs {
    return new XCall__Outputs(this);
  }
}

export class XCall__Inputs {
  _call: XCall;

  constructor(call: XCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class XCall__Outputs {
  _call: XCall;

  constructor(call: XCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class YCall extends ethereum.Call {
  get inputs(): YCall__Inputs {
    return new YCall__Inputs(this);
  }

  get outputs(): YCall__Outputs {
    return new YCall__Outputs(this);
  }
}

export class YCall__Inputs {
  _call: YCall;

  constructor(call: YCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class YCall__Outputs {
  _call: YCall;

  constructor(call: YCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintQuadCall extends ethereum.Call {
  get inputs(): MintQuadCall__Inputs {
    return new MintQuadCall__Inputs(this);
  }

  get outputs(): MintQuadCall__Outputs {
    return new MintQuadCall__Outputs(this);
  }
}

export class MintQuadCall__Inputs {
  _call: MintQuadCall;

  constructor(call: MintQuadCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get size(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get x(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintQuadCall__Outputs {
  _call: MintQuadCall;

  constructor(call: MintQuadCall) {
    this._call = call;
  }
}

export class _burnCall extends ethereum.Call {
  get inputs(): _burnCall__Inputs {
    return new _burnCall__Inputs(this);
  }

  get outputs(): _burnCall__Outputs {
    return new _burnCall__Outputs(this);
  }
}

export class _burnCall__Inputs {
  _call: _burnCall;

  constructor(call: _burnCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class _burnCall__Outputs {
  _call: _burnCall;

  constructor(call: _burnCall) {
    this._call = call;
  }
}

export class BurnFromCall extends ethereum.Call {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }
}

export class SetMetaTransactionProcessorCall extends ethereum.Call {
  get inputs(): SetMetaTransactionProcessorCall__Inputs {
    return new SetMetaTransactionProcessorCall__Inputs(this);
  }

  get outputs(): SetMetaTransactionProcessorCall__Outputs {
    return new SetMetaTransactionProcessorCall__Outputs(this);
  }
}

export class SetMetaTransactionProcessorCall__Inputs {
  _call: SetMetaTransactionProcessorCall;

  constructor(call: SetMetaTransactionProcessorCall) {
    this._call = call;
  }

  get metaTransactionProcessor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetMetaTransactionProcessorCall__Outputs {
  _call: SetMetaTransactionProcessorCall;

  constructor(call: SetMetaTransactionProcessorCall) {
    this._call = call;
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class WidthCall extends ethereum.Call {
  get inputs(): WidthCall__Inputs {
    return new WidthCall__Inputs(this);
  }

  get outputs(): WidthCall__Outputs {
    return new WidthCall__Outputs(this);
  }
}

export class WidthCall__Inputs {
  _call: WidthCall;

  constructor(call: WidthCall) {
    this._call = call;
  }
}

export class WidthCall__Outputs {
  _call: WidthCall;

  constructor(call: WidthCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetSuperOperatorCall extends ethereum.Call {
  get inputs(): SetSuperOperatorCall__Inputs {
    return new SetSuperOperatorCall__Inputs(this);
  }

  get outputs(): SetSuperOperatorCall__Outputs {
    return new SetSuperOperatorCall__Outputs(this);
  }
}

export class SetSuperOperatorCall__Inputs {
  _call: SetSuperOperatorCall;

  constructor(call: SetSuperOperatorCall) {
    this._call = call;
  }

  get superOperator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetSuperOperatorCall__Outputs {
  _call: SetSuperOperatorCall;

  constructor(call: SetSuperOperatorCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetMinterCall extends ethereum.Call {
  get inputs(): SetMinterCall__Inputs {
    return new SetMinterCall__Inputs(this);
  }

  get outputs(): SetMinterCall__Outputs {
    return new SetMinterCall__Outputs(this);
  }
}

export class SetMinterCall__Inputs {
  _call: SetMinterCall;

  constructor(call: SetMinterCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetMinterCall__Outputs {
  _call: SetMinterCall;

  constructor(call: SetMinterCall) {
    this._call = call;
  }
}

export class BatchTransferQuadCall extends ethereum.Call {
  get inputs(): BatchTransferQuadCall__Inputs {
    return new BatchTransferQuadCall__Inputs(this);
  }

  get outputs(): BatchTransferQuadCall__Outputs {
    return new BatchTransferQuadCall__Outputs(this);
  }
}

export class BatchTransferQuadCall__Inputs {
  _call: BatchTransferQuadCall;

  constructor(call: BatchTransferQuadCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sizes(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get xs(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get ys(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class BatchTransferQuadCall__Outputs {
  _call: BatchTransferQuadCall;

  constructor(call: BatchTransferQuadCall) {
    this._call = call;
  }
}

export class SetApprovalForAllForCall extends ethereum.Call {
  get inputs(): SetApprovalForAllForCall__Inputs {
    return new SetApprovalForAllForCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllForCall__Outputs {
    return new SetApprovalForAllForCall__Outputs(this);
  }
}

export class SetApprovalForAllForCall__Inputs {
  _call: SetApprovalForAllForCall;

  constructor(call: SetApprovalForAllForCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetApprovalForAllForCall__Outputs {
  _call: SetApprovalForAllForCall;

  constructor(call: SetApprovalForAllForCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get metaTransactionContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
